[tool]
[tool.poetry]
authors = ["Mickey Kim <mickeykkim@gmail.com>"]
classifiers = [
  'Development Status :: 2 - Pre-Alpha',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'Natural Language :: English',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
]
description = "Top-level package for inky-pi."
homepage = "https://github.com/mickeykkim/inky_pi"
license = "MIT"
name = "inky_pi"
packages = [{include = "inky_pi"}, {include = "tests", format = "sdist"}]
readme = "README.rst"
version = "0.2.0"

[[tool.poetry.source]]
name = "pypi-public"
url = "https://pypi.org/simple/"
priority = "primary"

[[tool.poetry.source]]
name = "piwheels"
url = "https://www.piwheels.org/simple/"
priority = "supplemental"

[tool.poetry.dependencies]
Pillow = "^10.2.0"
"RPi.GPIO" = {version = "^0.7.0", markers = "platform_machine == 'armv7l'"}
click = "^8.1.7"
environs = "^10.3.0"
flask = "^3.0.2"
font-fredoka-one = "^0.0.4"
font-hanken-grotesk = "^0.0.2"
inky = {version = "^1.2.0", markers = "platform_machine == 'armv7l'"}
loguru = "^0.7.2"
numpy = "~1.22"
python = ">=3.9,<4"
python-dotenv = "^1.0.1"
rich = "^13.7.1"
urllib3 = "^2.2.1"
zeep = "^4.2.1"
flask-wtf = "^1.2.1"
pydantic = "^2.6.3"
pydantic-settings = "^2.2.1"
setuptools = "^69.1.1"

[tool.poetry.group.dev.dependencies]
bandit = "^1.7.7"
black = "^22.3.0"
bumpversion = "^0.6.0"
coverage = "^6.3.2"
flake8 = "^6.1.0"
flake8-bugbear = "^23.7.10"
flake8-pyproject = "^1.2.3"
importlib-metadata = "^4.0.0"
invoke = "^2.0.0"
mypy = "^1.8"
poetry-plugin-export = "^1.0.6"
pre-commit = "^2.17.0"
pylint = "^2.0"
pytest = "^7.1.3"
pytest-cov = "^4.0.0"
safety = "^2.1.1"
ssort = "^0.11.6"
sphinx = "^5.2.3"
sphinx-rtd-theme = "^1.0.0"
tox = "^4.0.0"
types-requests = "^2.25.8"
ruff = "^0.0.257"
types-pillow = "^10.2.0.20240213"

[tool.poetry.scripts]
inky_pi = "inky_pi.cli:main"

[tool.flake8]
ignore = ['E203', 'W503']
select = ['B', 'C', 'E', 'F', 'W', 'T4', 'B9']
per-file-ignores = [
    '*/__init__.py:F401',
    'tests/*:E501,B950',
    'tasks.py:E501,B950',
]
max-line-length = 88
max-complexity = 10

[tool.pytest.ini_options]
filterwarnings = "ignore::DeprecationWarning"
markers = [
  "integration", # end-to-end tests
  "e2e",
]
minversion = "6.0"
testpaths = ["tests"]
norecursedirs = [
    "docs",
    "dist",
    "build",
    "venv",
    "bin",
    "lib",
    "include",
    "share",
    "local",
    "tmp",
    "tmp.*",
    ".*",
    "*.egg-info",
    "*.egg-info/*",
]

[tool.coverage.run]
branch = true
source = ["inky_pi", "flask_app"]
omit = ["tasks.py", "run_flask_app.py", "tests/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@abstractmethod",
    "@abc.abstractmethod",
]
omit = [
    "tests/*",
    "venv/*",
    "bin/*",
    "lib/*",
    "include/*",
    "share/*",
    "local/*",
    "tmp/*",
    "tmp.*/*",
    ".*/*",
    "*.egg-info/*",
]
ignore_errors = true
skip_empty = true
precision = 2

[tool.coverage.html]
skip_empty = true
directory = "bin/coverage_html"

[tool.black]
line-length = 88
preview = true

[tool.isort]
profile = "black"

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = [
    "flask_wtf.*",
    "wtforms.*"
]
ignore_missing_imports = true

[tool.ruff]
select = ["E", "F", "G", "B", "Q", "W"]
ignore = []
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G"]
unfixable = []
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "__pycache__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "bin",
]
# Same as Black.
line-length = 88
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Assume Python 3.10.
target-version = "py310"
[tool.ruff.mccabe]
max-complexity = 7

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py3.9, py3.10, py3.11, docs

[testenv:py3.9]
basepython=python3.9

[testenv:py3.10]
basepython=python3.10

[testenv:py3.11]
basepython=python3.11

[testenv]
description = Run compliance tests
allowlist_externals = poetry, invoke
setenv =
    PIP_EXTRA_INDEX_URL = https://www.piwheels.org/simple/
require_locked_deps = true
install_dev_deps = true
commands =
    invoke format --check
    invoke lint
    invoke security
    invoke test --junit --coverage

[testenv:docs]
description = Build documentation
allowlist_externals = poetry, invoke
setenv =
    PIP_EXTRA_INDEX_URL = https://www.piwheels.org/simple/
require_locked_deps = true
install_dev_deps = true
commands =
    invoke docs --no-launch
"""

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]
