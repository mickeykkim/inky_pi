# GitHub Actions workflow for installing Poetry and running Tox
# Based on: https://github.com/snok/install-poetry

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push (all branches) or pull requests (only for main branch)
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Build and run compliance tests
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ "3.9", "3.10", "3.11.1"]

    steps:
      # Checkout out repo and setup python
      - name: Check out repository
        uses: actions/checkout@v4.1.2

      - name: Setup Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: ${{ matrix.python }}
          architecture: x64

      # Install and configure poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Install project package
      - name: Install library
        run: poetry install --no-interaction

      # Save api keys to .env file
      - name: Create .env file
        run: |
          echo TRAIN_API_TOKEN=${{ secrets.TRAIN_API_TOKEN }} > .env
          echo WEATHER_API_TOKEN=${{ secrets.WEATHER_API_TOKEN }} >> .env

      # Run tox
      - name: Run Tox
        run: poetry run tox -e py
